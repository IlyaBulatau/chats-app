services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - ${APP_PORT}:8000
      - "5678:5678"  # порт для дебаггера
    volumes:
      - ./chat:/home/app
    command: >
      sh -c "
        export PYTHONPATH=`pwd` && 
        python cli/init_bucket.py &&
        python cli/migrate.py &&
        python -m debugpy --listen 0.0.0.0:5678 -m uvicorn main:app --reload --host 0.0.0.0 --port 8000 --log-config ./log_config.yaml --log-level debug
      "
    depends_on:
      postgres:
          condition: service_healthy
      rabbitmq:
          condition: service_healthy 

  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - 8001:8000
    volumes:
      - ./chat:/home/code
    command: >
      sh -c "taskiq worker application.backgroud_tasks.broker:broker -w 2 -fsd --reload --log-level INFO"
    depends_on:
      postgres:
          condition: service_healthy
      rabbitmq:
          condition: service_healthy 
  
  postgres:
    image: postgres:16-bullseye
    container_name: postgres
    restart: unless-stopped
    ports:
      - "54321:${DB_PORT}"
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_LOGIN}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_LOGIN} -d ${DB_NAME}']
      interval: 3s
      timeout: 3s
      retries: 3
      start_period: 5s
  
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5673:${BROKER_PORT}"
      - "15673:15672"
    volumes:
      - rabbit_data:/data
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 2
  storage:
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z.fips
    container_name: storage
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    command: server --console-address ":9001" /data


volumes:
  postgres_data:
  rabbit_data:
  minio_storage:
